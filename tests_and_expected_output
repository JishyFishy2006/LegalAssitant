# Tests & Expected Outputs

## Unit tests

### PDF parsing
- Given: sample PDF
- Expect: ≥2 sections, headings present

### HTML parsing
- Given: HTML with headings
- Expect: section names match headings, text length > 20

### Record normalization
- Given: mixed manifests
- Expect: records.jsonl entries have id, title, source, date, type, path

### Chunking
- Given: long text
- Expect: chunks have correct size & overlap

### Embeddings
- Given: 3 strings
- Expect: correct shape; identical strings have sim > 0.95

### Retrieval
- Given: FAISS index
- Expect: top-k contains known doc

### Reranker
- Given: shuffled candidates
- Expect: correct item ranked first

### Structure validation
- Given: malformed JSON
- Expect: structurer repairs or raises

### TTS
- Given: short text
- Expect: audio bytes length > 1000

---

## End-to-end (E2E)

### Healthcare policy (PDF)
- Setup: Index contains No Surprises Act PDF
- Input: text query
- Expect: valid JSON with ≥2 pros & cons, citations from HHS/CMS, rec length ≥ 40 chars

### Consumer rights (HTML/JSON)
- Setup: CFPB HTML + JSON in index
- Input: audio query
- Expect: valid JSON, ≥2 CFPB citations, rec references evidence, audio if tts=true

---

## Failure modes

### Empty audio
- Expect: 400 error

### No matching docs
- Expect: safe "insufficient context" message

### Invalid LLM JSON
- Expect: repair attempt, else 422

---

## Golden outputs
- Store under `tests/e2e/goldens/`
- Must match `pros_cons.schema.json`
- Used for regression checks
